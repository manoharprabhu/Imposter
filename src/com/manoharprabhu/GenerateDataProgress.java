/*
 * The MIT License
 *
 * Copyright 2016 mprabhu.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package com.manoharprabhu;

import com.manoharprabhu.services.DataStore;
import com.manoharprabhu.services.DatabaseService;
import com.manoharprabhu.services.IValueGenerator;
import com.manoharprabhu.services.NumberGenerator;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author mprabhu
 */
public class GenerateDataProgress extends javax.swing.JFrame {

    private List<IValueGenerator> generatorList = null;
    private Long numberOfRowsToGenerate = 0L;

    private PreparedStatement statement = null;

    /**
     * Creates new form GenerateDataProgress
     */
    public GenerateDataProgress() {
        initComponents();
        List<Map<String, String>> x = DataStore.getColumnNameTypeList();
        
        initializeGeneratorList();
        try {
            startInsertingData();
        } catch (SQLException ex) {
            Logger.getLogger(GenerateDataProgress.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public GenerateDataProgress(Long rows) {
        this.numberOfRowsToGenerate = rows;
        initComponents();
        initializeGeneratorList();
        try {
            startInsertingData();
        } catch (SQLException ex) {
            Logger.getLogger(GenerateDataProgress.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void initializeGeneratorList() {
        DatabaseService databaseService = DataStore.getDatabaseServiceInstance();
        generatorList = new ArrayList<>();
        List<Map<String, String>> columnNamesAttributes = DataStore.getColumnNameTypeList();
        for (Map<String, String> item : columnNamesAttributes) {
            if ("1".equals(item.get("noValue")) || item.get("noValue") == null) {
                generatorList.add(null);
                continue;
            } else {
                if ("number".equals(databaseService.getTypeOfColumn(item.get("column_type")))) {
                    NumberGenerator numberGenerator = new NumberGenerator();
                    numberGenerator.setIsNextRandom("1".equals(item.get("isRandomNumber")));
                    numberGenerator.setMinimumValue(Long.parseLong(item.get("minimumValue")));
                    numberGenerator.setMaximumValue(Long.parseLong(item.get("maximumValue")));
                    numberGenerator.setStartValue(Long.parseLong(item.get("startingValue")));
                    generatorList.add(numberGenerator);
                    continue;
                } else {
                    generatorList.add(null);
                }
            }
        }
        this.statement = databaseService.getPreparedStatementForInsertQuery();
    }

    private void startInsertingData() throws SQLException {
        for (Long i = 0L; i < this.numberOfRowsToGenerate; i++) {
            statement.clearParameters();
            for (int colIndex = 0; colIndex < generatorList.size(); colIndex++) {
                if (generatorList.get(colIndex) != null) {
                    statement.setObject(colIndex + 1, generatorList.get(colIndex).getNextValue());
                } else {
                    statement.setObject(colIndex + 1, null);
                }
            }
            System.out.println(statement.toString());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        generatedQuery = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        generatedQuery.setText("Query");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(generatedQuery)
                .addContainerGap(342, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(generatedQuery)
                .addContainerGap(264, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GenerateDataProgress.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GenerateDataProgress.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GenerateDataProgress.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GenerateDataProgress.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GenerateDataProgress().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel generatedQuery;
    // End of variables declaration//GEN-END:variables

    /**
     * @param numberOfRowsToGenerate the numberOfRowsToGenerate to set
     */
    public void setNumberOfRowsToGenerate(Long numberOfRowsToGenerate) {
        this.numberOfRowsToGenerate = numberOfRowsToGenerate;
    }
}
